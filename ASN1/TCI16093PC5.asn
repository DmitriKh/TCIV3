TCI-16093-PC5 
DEFINITIONS AUTOMATIC TAGS ::= 
BEGIN

IMPORTS
RequestWsmTxCount,
RequestWsmRxCount,
RequestWsmTxCountReset,
RequestWsmRxCountReset,
SetInitialState,
SetWsmTxInfo,
StartWsmRx,
StopWsmRx,
StopWsmTx FROM TCI-wsm
/*
StartWsmTx, 
StartWsaTxPerdiodic, 
StopWsaTxPeriodic, 
AddWsaProviderService, 
ChangeWsaProviderService,
DelWsaProviderService, 
AddUserService,
DelUserService FROM TCI-wsm

GetIPv6InterfaceInfo, 
SetIPv6Address, 
StartIPv6Ping,
StopIPv6Ping FROM TCI-ip
*/

ATcmdInfo,
ResponseInfo FROM TCI-responseInfo

Indication FROM TCI-indication

pc5Mtu,
Exception,
Response, 
ResultCode,
MsgID FROM TCI-CommonTypes

tciMtu,
--PduData, 
--PduType, 
--UserPriority, 
--HashedId8, 
--Time64,
RepeatRate, 
Opaque, 
RadioInterface, 
Psid, 
RCPI
FROM TCI-CommonTypes
;

TCI16093PC5 ::= CHOICE{
	request			[0]	Request,
	response		[1]	Response,
	indication 		[2] Indication,
	responseInfo	[3]	ResponseInfo, 
	exception		[4] Exception,
	...
	} 

Request ::=  SEQUENCE {
   messageId   MESSAGE-ID-AND-TYPE.&id({MessageTypes}),
   value       MESSAGE-ID-AND-TYPE.&Type({MessageTypes}{@.messageId}),
   ...
   }

MESSAGE-ID-AND-TYPE ::= CLASS {
   &id    MsgID UNIQUE,
   &Type
   } WITH SYNTAX {&Type IDENTIFIED BY &id}

MessageTypes MESSAGE-ID-AND-TYPE ::= {
	{ SetInitialState	IDENTIFIED BY setInitialState } |
	{ Pc5SetWsmTxInfo IDENTIFIED BY setWsmTxInfo} |
	{ StartWsmTx IDENTIFIED BY startWsmTx} |
	{ StopWsmTx IDENTIFIED BY stopWsmTx} |
	{ Pc5StartWsmRx IDENTIFIED BY startWsmRx} |
	{ StopWsmRx IDENTIFIED BY stopWsmRx} |

--	{ StartWsaTxPerdiodic IDENTIFIED BY startWsaTxPerdiodic} |
--	{ StopWsaTxPeriodic IDENTIFIED BY stopWsaTxPeriodic} |
--	{ AddWsaProviderService IDENTIFIED BY addWsaProviderService} |
--	{ ChangeWsaProviderService IDENTIFIED BY changeWsaProviderService} |
--	{ DelWsaProviderService IDENTIFIED BY delWsaProviderService} |
--	{ AddUserService IDENTIFIED BY addUserService} |
--	{ DelUserService IDENTIFIED BY delUserService} |
--	{ GetIPv6InterfaceInfo IDENTIFIED BY getIpv6InterfaceInfo} |
--	{ SetIPv6Address IDENTIFIED BY setIpv6Address} |
--	{ StartIPv6Ping IDENTIFIED BY startIpv6Ping} |
--	{ StopIPv6Ping IDENTIFIED BY stopIpv6Ping}

	{ SetUeConfig IDENTIFIED BY setUeConfig} |
	{ RequestWsmTxCount IDENTIFIED BY requestWsmTxCount} |
	{ RequestWsmRxCount IDENTIFIED BY requestWsmRxCount} |
	{ RequestWsmTxCountReset IDENTIFIED BY requestWsmTxCountReset} |
	{ RequestWsmRxCountReset IDENTIFIED BY requestWsmRxCountReset} |
	{ SendATcommand IDENTIFIED BY sendATcommand} | 
	{ SendUeConfigXML IDENTIFIED BY sendUeConfigXML } 
}

setInitialState     					MsgID ::= 1
setWsmTxInfo     						MsgID ::= 2
startWsmTx     							MsgID ::= 3
stopWsmTx		     					MsgID ::= 4
startWsaTxPerdiodic     				MsgID ::= 5
stopWsaTxPeriodic     					MsgID ::= 6
startWsmRx     							MsgID ::= 7
stopWsmRx     							MsgID ::= 8
--addWsaProviderService		    		MsgID ::= 9
--changeWsaProviderService				MsgID ::= 10
--delWsaProviderService		    		MsgID ::= 11
--addUserService						MsgID ::= 12
--delUserService						MsgID ::= 13

setUeConfig								MsgID ::= 21
sendATcommand							MsgID ::= 22
sendUeConfigXML 						MsgID ::= 23
requestSutStatus						MsgID ::= 24
requestWsmTxCount						MsgID ::= 25
requestWsmRxCount			  			MsgID ::= 26
requestWsmTxCountReset					MsgID ::= 27
requestWsmRxCountReset		  			MsgID ::= 28

/* IMPORTED Messages without changes

SetInitialState,
StopWsmRx,
StopWsmTx
RequestWsmTxCount,
RequestWsmRxCount,
RequestWsmTxCountReset,
RequestWsmRxCountReset,
*/

SendATcommand ::=  ATcmdInfo -- e.g. AT+CATM, AT+CCUTLE, AT+CUSPCREQ, AT+CUTCR, AT+CCBRREQ, AT+CV2XDTS, ATV1, ATV0
-- response from SendATcommand is provided via ResponseInfo

Pc5SetWsmTxInfo ::= SetWsmTxInfo (WITH COMPONENTS {
		psid,
		radio,
		security,
		transmitPowerLevel, -- ?
		infoElementsIncluded ('000000000000000000000000'B), -- default no WAVE Extension Info elements included
		userPriority,		-- ?
		channelIdentifier ABSENT,
		dataRate ABSENT,  -- but dot3 for PC5 allows it.
		timeslot ABSENT,
		repeatRate ABSENT,	-- Use SPS instead
		destinationMACAddr ABSENT,
		channelLoad	ABSENT,
		expiryTime	ABSENT,
		payload ABSENT
	})

SetUeConfig ::= SEQUENCE {
	earfcn					EARFCN,
    txPower 				TXpowerPC5,
    bw			    		BandwidthPC5,
    mcs						MCS,
	psxch					PSxCH,
	rbSize					RBSize,
    rbCount					RBCount,
	sps						SPS,  -- pool SPS or One shot
	pppp					PPPP,
	event					PC5Event,
    ...
}

SendUeConfigXML ::= SEQUENCE {
	counter	    INTEGER (1..127),			-- index for the current segment
	total		INTEGER (1..127),			-- total number of segments to be transferred
	pdu			Opaque(SIZE(0..tciMtu)),    -- max Pdu for tci is set in TCI-Common as 1500
	...
}

StartWsmTx ::= SEQUENCE{  -- handled through WSM-WaveShortMessage.request
    psid            Psid,
    radio           RadioInterface,
    repeatRate      RepeatRate, -- when set to 0 - one shot message, otherwise periodic with RepeatRate per 1609.3
    -- 20ms 50, 100, 200, .. 1000ms, (250, 50, 25, ... 5). 
    payload         Opaque(SIZE(0..pc5Mtu)) OPTIONAL,
    ...
}

Pc5StartWsmRx ::= StartWsmRx (WITH COMPONENTS {
	psid OPTIONAL,
	radio,
    eventHandling,
    pduFingerPrint OPTIONAL
})

BandwidthPC5  ::= INTEGER (0..255)    -- 
TXpowerPC5    ::= INTEGER(-128..127)  -- TxPower
EARFCN        ::= ARFCN-ValueEUTRA-r9 -- channel number
MCS           ::= INTEGER(0..31)      -- Modulation & Coding scheme
PSxCH  		  ::= ENUMERATED {
			pscch (1),				 -- Physical Sidelink Control Channel 
			pssch (2)				 -- Physical Sidelink Shared Channel 
}
PPPP          ::= SL-Priority-r13
RBSize        ::= INTEGER(0..65535)
RBCount       ::= INTEGER(0..65535)
SPS           ::= INTEGER(0..65535)
PC5Event	  ::= INTEGER(0..65535)
--PacketSize    ::= INTEGER(0..pc5Mtu)
--RSSI          ::= RCPI

-- following defintions come from EUTRA-RRC-DEFINITIONS.asn

maxEARFCN2 INTEGER          ::= 262143                      -- Highest value extended EARFCN range
maxSL-TxPool-r12 INTEGER    ::= 4                           -- Maximum number of individual sidelink Tx resource pools

ARFCN-ValueEUTRA-r9         ::= INTEGER (0..maxEARFCN2)
P-Max                       ::= INTEGER (-30..33)
SL-Priority-r13             ::= INTEGER (1..8)
SL-TxPoolIdentity-r12       ::=INTEGER (1.. maxSL-TxPool-r12)

END
